---
title: "Explore Midterm Forecasts"
execute: 
    echo: false
    warning: false
---

```{ojs setup}
//| include: false
import { fmt_pct, rate, fmt_surname, AP, load_image } from "./utils.js"
d3 = require("d3")

d_sum = FileAttachment("summary.json").json()
distrs = FileAttachment("house_districts.csv").csv({typed: true});
states = FileAttachment("senate_races.csv").csv({typed: true});
geom_hex = FileAttachment("hex.json").json()
geom_states = FileAttachment("states.json").json()

draws = {
    let names = await FileAttachment("draws_cols.json").json()
    let raw = await load_image("draws.png");
    let out = new Array(raw.h);
    
    const n_house = distrs.reduce((accuml, x) => accuml + !x.unopp, 0);
    const n_sen = states.reduce((accuml, x) => accuml + !x.unopp, 0);
    for (let i = 0; i < raw.h; i++) {
        let obj = {}
        obj.pred_natl = (raw[i*raw.w + 0] + 2.0) / 5.0;
        obj.seats_house = Math.round((raw[i*raw.w + 1] + 0.5) * 200.0);
        obj.seats_sen = Math.round((raw[i*raw.w + 2] + 1.5) * 25.0);
        for (let j = 3; j < names.length; j++) {
            obj[names[j]] = raw[i*raw.w + j];
        }
        out[i] = obj;
    }
    
    return out;
}

d_distrs = d3.index(distrs.map(d => {
        let at_large = ["AK", "DE", "ND", "SD", "VT", "WY"].includes(d.state);
        d.name = AP[d.state] + " " + (at_large ? "At-Large" : d.district);
        d.name_short = AP[d.state] +  (at_large ? "" : " " + d.district);
        d.rcv = ["AK", "ME"].includes(d.state);
        d.interval = [d.dem_mean, d.dem_q10, d.dem_q25, d.dem_q75, d.dem_q90, d.rcv];
        d.rating = rate(d.pr_dem);
        d.margin = Math.abs(d.dem_mean - 0.5);
        d.dem_cand = fmt_surname(d.dem_cand);
        d.rep_cand = fmt_surname(d.rep_cand);
        if (d.state == "AK") {
            d.dem_cand = null;
            d.rep_cand = null;
        }
        d.cands = [d.dem_cand, d.rep_cand, d.inc_seat];
        d.search = {dem: "incumbent dem. ", open: "open seat ", gop: "incumbent rep. incumbent gop. "}[d.inc_seat] 
                + ["contested ", "unopposed uncontested "][d.unopp];
        return d;
    }), 
    d => d.state, d => d.district);
d_states = d3.index(states.map(d => {
        d.name = AP[d.state];
        d.rcv = ["AK", "ME"].includes(d.state);
        if (d.state == "OK" && d.rep_cand == "M. MULLIN") {
            d.state = "OK-S";
            d.name += " Special"
        }
        d.interval = [d.dem_mean, d.dem_q10, d.dem_q25, d.dem_q75, d.dem_q90, d.rcv];
        d.rating = rate(d.pr_dem);
        d.margin = Math.abs(d.dem_mean - 0.5);
        d.dem_cand = fmt_surname(d.dem_cand);
        d.rep_cand = fmt_surname(d.rep_cand);
        if (d.state == "AK") {
            d.dem_cand = null;
            d.rep_cand = null;
        }
        d.cands = [d.dem_cand, d.rep_cand, d.inc_seat];
        d.search = {dem: "incumbent dem. ", open: "open seat ", gop: "incumbent rep. incumbent gop. "}[d.inc_seat] 
                + ["contested ", "unopposed uncontested "][d.unopp];
        return d;
    }), 
    d => d.state);

DARK_BLUE = "#0063B1"
DARK_RED = "#A0442C"
BLUE = "#3D77BB"
RED = "#B25D4C"
w_BODY = 796;
SMALL = width < 600;
elec_date = new Date("2022-11-08")


color = {
    let midpt = "#fafffa";
    let color_dem = d3.scaleLinear()
        .domain([0.5, 1.0])
        .range([midpt, DARK_BLUE]);
    let color_gop = d3.scaleLinear()
        .domain([0.0, 0.5])
        .range([DARK_RED, midpt]);
    return x => x <= 0.5 ? color_gop(x) : color_dem(x);
}

window.d3 = d3;
```

```{ojs}
viewof text = Inputs.textarea({
    placeholder: `Enter filtering conditions here. For example:
    WA-8 win D
    DE-AL < 60%
    OK-S GOP win
    NC senate Dem loss
    `,
    spellcheck: false,
    autocomplete: false,
    autocapitalize: false,
    rows: 5,
    resize: true,
    submit: false,
    monospace: true,
});
```

```{ojs}
//| include: false
db_text = debounce(viewof text, 300);
constr = {
    let lines = db_text.split(/\r?\n/)
        .map(x => x.trim().replaceAll(/\s+/g, " "))
        .filter(x => x != "");
        
    const regex_race = /^([A-Z]{2})([- ](\d{1,2}|AL|at[- ]large|S(?!\w)|special|senate|S senate|senate special))?/i
    let races = lines.map(x => {
        let matches = x.match(regex_race);
        if (matches === null) return "";
        if (typeof matches[3] == "undefined") return matches[1];
        if (matches[3].toLowerCase() == "senate") return matches[1];
        if (/(AL|at[- ]large)/i.test(matches[3])) matches[3] = "1";
        if (/(S(?!\w)|special|S senate|senate special)/i.test(matches[3])) return matches[1] + "-S";
        return matches[1] + "-" + (+matches[3]);
    })
    
    let lower = lines.map(x => {
        x = x.replace(">=", ">")
            .replace(/(win (D|dems?)|(D|dems?) win|(R|GOP|rep) lose|lose (R|GOP|rep))/i, "> 50%");
        let matches = x.match(/> ?(\d*(?:\.\d+)?%?)/);
        if (matches === null) {
            return 0.0;
        } else {
            let val = parseFloat(matches[1]);
            if (matches[0].endsWith("%")) val /= 100.0;
            return val;
        }
    })
    let upper = lines.map(x => {
        x = x.replace(/<(?!=)/, "<=")
            .replace(/(win (R|GOP|rep)|(R|GOP|rep) win|(D|dems?) los[es]|los[es] (D| dems?))/i, "<= 49.999%");
        let matches = x.match(/<= ?(\d*(?:\.\d+)?%?)/);
        if (matches === null) {
            return 1.0;
        } else {
            let val = parseFloat(matches[1]);
            if (matches[0].endsWith("%")) val /= 100.0;
            return val;
        }
    })
    
    return d3.zip(races, lower, upper).map(x => { 
        if (x[1] >= x[2]) x[1] = 0;
        return { key: x[0], lower: x[1], upper: x[2], };
    });
}
window.constr = constr;

draws_f = draws.filter(x => {
    for (let c of constr) {
        if (c.key === null) continue;
        if (x[c.key] <= c.lower || x[c.key] > c.upper) return false;
    }
    return true;
});
window.draws_f = draws_f;

prob_distr = Object.fromEntries(Array.from(d_distrs).map(function([state, v0]) {
    window.x = v0
    return [state, Object.fromEntries(Array.from(v0).map(function([distr, v1]) {
        let key = state + "-" + (+distr);
        let prob = d3.mean(draws_f, x => x[key] >= 0.5)
        return [+distr, prob];
    }))]
}));
prob_state = Object.fromEntries(Array.from(d_states).map(
    ([key, _]) => [key, d3.mean(draws_f, x => x[key] >= 0.5)]
));
```

```{ojs}
//| label: plot-hist-house
//| column: screen
{
let exag_fac = 1 - Math.sqrt(width)/80;
let last_elec = 222;
let xmin = Math.max(Math.min(d_sum.house_q10*exag_fac, 218 - 10), 0)
let xmax = Math.min(Math.max(d_sum.house_q90/exag_fac, 218 + 10), 435)
let median = d3.median(draws_f, d => d.seats_house);
let s_gain = (median >= last_elec ? "+" : "-") + Math.abs(last_elec - Math.round(median));
let breaks = Array(~~((xmax - xmin)/4)).fill().map((e, i) => 4*i + 0.5 + ~~xmin);
window.breaks=breaks;

let text_shadow = function(text, opt) {
    let opt2 = {...opt}
    opt2.dx = opt2.dx + 3
    opt2.dy = opt2.dy + 3
    opt2.fill = "#0007"
    opt2.strokeWidth = 0
    return [Plot.text([text], opt2), Plot.text([text], opt)]
}

let plot = Plot.plot({
    x: {
        domain: [xmin, xmax],
        round: true,
        clamp: true,
        inset: 10,
        tickSize: 8,
        reverse: true,
        label: null,
    },
    y: {
        legend: false,
        axis: null,
        insetTop: 4,
    },
    color: {
        legend: false,
    },
    marks: [
        Plot.rectY(draws_f, Plot.binX({y: "count"}, {
                x: "seats_house",
                fill: d => d.seats_house >= 218 ? BLUE : RED,
                inset: 0,
                thresholds: breaks, 
            })),
        Plot.ruleY([0]),
        Plot.ruleY([0], {
            dy: 2,
            strokeWidth: 5,
            x1: d3.quantile(draws_f, 0.1, x => x.seats_house),
            x2: d3.quantile(draws_f, 0.9, x => x.seats_house),
            color: "red",
            }),
        Plot.ruleX([last_elec, median]),
        text_shadow(s_gain, { 
            x: median, dy: -48, dx: 3,
            frameAnchor: "bottom", textAnchor: "start", lineAnchor: "bottom",
            fill: "white", strokeWidth: 4, stroke: "black", fontSize: 40, fontWeight: "bold",
            }),
        text_shadow(median >= last_elec ? "GAIN" : "LOSS", { 
            x: median, dy: -42, dx: 5,
            frameAnchor: "bottom", textAnchor: "start", lineAnchor: "top",
            fill: "white", strokeWidth: 2, stroke: "black", fontSize: 14, fontWeight: "bold",
            }),
        Plot.text(["← DEM. MAJORITY"], { 
            x: 217.5, dy: -4, dx: -3,
            frameAnchor: "bottom", textAnchor: "end",
            fontWeight: "bold", fill: "#111",
            }),
        Plot.text(["REP. MAJORITY →"], { 
            x: 217.5, dy: -4, dx: 3,
            frameAnchor: "bottom", textAnchor: "start",
            fontWeight: "bold", fill: "#111",
            }),
         Plot.text([last_elec + " LAST ELECTION"], { 
            x: last_elec, dy: -4,
            frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
            fontWeight: "bold",
            }),
         Plot.text(["← DEM. HOUSE SEATS"], { 
            x: xmax, dy: -4 - (SMALL ? 10 : 0), dx: 4,
            frameAnchor: "bottom", textAnchor: "start",
            fontWeight: "bold",
            }),
    ],
    
    width: width,
    height: 240,
    marginTop: 24,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0,
    
    style: {
        fontSize: 9,
        color: "#444",
        overflow: "visible",
    }
})
return plot;
}
```

::: {.banner}
```{ojs}
//| label: summary
//| column: screen
//| 
dem_lead = true; // d_sum.house_prob > 0.5
{
    let q50 = d3.median(draws_f, x => x.pred_natl);
    let dem_prob_house = d3.mean(draws_f, x => x.seats_house >= 218);
    let dem_prob_sen = d3.mean(draws_f, x => x.seats_sen >= 50);
    
    let win_party = dem_lead ? "Democrats" : "Republicans"
    let win_class = dem_lead ? "dem" : "rep"
    let pct = fmt_pct(dem_lead ? q50 : 1 - q50, 1);
    let phrase = dem_lead ? "controlling" : "flipping"
    let prob_house = dem_lead ? dem_prob_house : 1 - dem_prob_house
    let prob_sen = dem_lead ? dem_prob_sen : 1 - dem_prob_sen
    
    return md`
Under these conditions, the <b class="${win_class}">${win_party}</b> would be expected to win
**around ${pct} of the popular vote**.

They would have a **${fmt_pct(prob_house)} chance** of ${phrase} the House and 
a **${fmt_pct(prob_sen)} chance** of ${phrase} the Senate.

<p class="updated">${draws_f.length} draws
(${fmt_pct(draws_f.length/draws.length)}) in use.</p>`;
}
```
:::

```{ojs}
//| label: plot-hist-sen
//| column: screen
{
let exag_fac = 1 - Math.sqrt(width)/160;
let last_elec = 50;
let xmin = Math.max(Math.min(d_sum.sen_q10*exag_fac, 50 - 10), 0)
let xmax = Math.min(Math.max(d_sum.sen_q90/exag_fac, 50 + 10), 100)
let median = d3.median(draws_f, d => d.seats_sen);
let s_gain = (median >= last_elec ? "+" : "-") + Math.abs(last_elec - Math.round(median));
let breaks = Array(~~(xmax - xmin)).fill().map((e, i) => i + 0.5 + ~~xmin);

let text_shadow = function(text, opt) {
    let opt2 = {...opt}
    opt2.dx = opt2.dx + 3
    opt2.dy = opt2.dy + 3
    opt2.fill = "#0007"
    opt2.strokeWidth = 0
    return [Plot.text([text], opt2), Plot.text([text], opt)]
}

let plot = Plot.plot({
    x: {
        domain: [xmin, xmax],
        clamp: true,
        inset: 10,
        tickSize: 8,
        reverse: true,
        axis: "top",
        label: null,
    },
    y: {
        legend: false,
        axis: null,
        insetBottom: 4,
    },
    color: {
        legend: false,
    },
    marks: [
        Plot.rectY(draws_f, Plot.binX({
                y: x => -x.length,
            }, {
                x: "seats_sen",
                fill: d => d.seats_sen >= 50 ? BLUE : RED,
                thresholds: breaks, 
            })),
        Plot.ruleY([0]),
        Plot.ruleY([0], {
            dy: 2,
            strokeWidth: 5,
            x1: d3.quantile(draws_f, 0.1, x => x.seats_sen),
            x2: d3.quantile(draws_f, 0.9, x => x.seats_sen),
            color: "red",
            }),
        Plot.ruleX([last_elec, median]),
        text_shadow(s_gain, { 
            x: median, dy: 48, dx: 3,
            frameAnchor: "top", textAnchor: "start", lineAnchor: "top",
            fill: "white", strokeWidth: 4, stroke: "black", fontSize: 40, fontWeight: "bold",
            }),
        text_shadow(median >= last_elec ? "GAIN" : "LOSS", { 
            x: median, dy: 42, dx: 5,
            frameAnchor: "top", textAnchor: "start", lineAnchor: "bottom",
            fill: "white", strokeWidth: 2, stroke: "black", fontSize: 14, fontWeight: "bold",
            }),
        Plot.text(["← DEM. MAJORITY"], { 
            x: 49.5, dy: 8, dx: -3,
            frameAnchor: "top", textAnchor: "end",
            fontWeight: "bold", fill: "#111",
            }),
        Plot.text(["REP. MAJORITY →"], { 
            x: 49.5, dy: 8, dx: 3,
            frameAnchor: "top", textAnchor: "start",
            fontWeight: "bold", fill: "#111",
            }),
         Plot.text([last_elec + " LAST ELECTION"], { 
            x: last_elec, dy: 8,
            frameAnchor: "bottom", textAnchor: "middle", lineAnchor: "bottom",
            fontWeight: "bold",
            }),
         Plot.text(["← DEM. SENATE SEATS"], { 
            x: xmax, dy: 4 + (SMALL ? 10 : 0), dx: 4,
            frameAnchor: "top", textAnchor: "start",
            fontWeight: "bold",
            }),
    ],
    
    width: width,
    height: 240,
    marginTop: 0,
    marginLeft: 0,
    marginRight: 0,
    
    style: {
        fontSize: 9,
        color: "#444",
        overflow: "visible",
    }
})
return plot;
}
```

# House and Senate Maps

:::{.column-screen-inset layout-ncol=2}
```{ojs}
//| label: plot-house-map
house_map = {
let distrs = topojson.feature(geom_hex, geom_hex.objects.foo).features.map(d => {
    d.match = d_distrs.get(d.properties.state).get(d.properties.district);
    d.flip = ((d.match.pr_dem > 0.5 && d.match.inc_seat == "gop") 
                || (d.match.pr_dem < 0.5 && d.match.inc_seat == "dem"))
            && (Math.abs(d.match.pr_dem - 0.5) > 0.01);
    return d;
})
    
const w = 960;
const h = w * 0.72;
const GOLD = "#bc1";

const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, w, h])
    .style("width", "100%")
    .style("height", "auto");

let proj = d3.geoAlbers()
    .scale(0.92*w)
    .translate([0.97*w/2, 0.94*h/2]);
let path = d3.geoPath(proj);

let geom_distrs = svg
    .append("g")
    .attr("class", "distrs")
    .selectAll("path")
    .data(distrs)
    .enter().append("path")
    .attr("fill", "#fff")
    .attr("stroke", "#111")
    .attr("stroke-width", 0.5)
    .attr("d", path);

let geom_distrs_hover = svg
    .append("g")
    .attr("class", "distrs")
    .selectAll("path")
    .data(distrs)
    .enter().append("path")
    .attr("fill", d => d.flip ? "url(#diagonalHatch)" : "none")
    .attr("stroke", "#000")
    .attr("stroke-width", 0.0)
    .attr("d", path);    

let tt = d3.select("#plot-house-map").append("div")
        .attr("class", "map-tooltip")
        .style("visibility", "hidden");
let prob_table;
    
let mmv = function(e, d) {
    let [mx, my] = d3.pointer(e);
    let svg_dim = svg.node().getBoundingClientRect();
    let w_fac = svg_dim.width/w;
    if (mx < 50/w_fac) mx = 50/w_fac;
    if (mx > w - 190/w_fac) mx = w - 190/w_fac;
    
    let prob = prob_table[d.match.state][d.match.district];
    let cand;
    let miss;
    if (prob > 0.5) {
        cand = !d.match.dem_cand ? "Democrats" : d.match.dem_cand;
        miss = !d.match.dem_cand;
    } else {
        cand = !d.match.rep_cand ? "Republicans" : d.match.rep_cand;
        miss = !d.match.rep_cand;
    }
    let inc = {
        dem: `<b style='color: ${DARK_BLUE}'>Dem.</b> incumbent`,
        gop: `<b style='color: ${DARK_RED}'>Rep.</b> incumbent`,
        open: "<b>Open</b> seat",
    }[d.match.inc_seat]
    let prob_text;
    let prob_color = prob > 0.5 ? DARK_BLUE : DARK_RED;
    if (d.match.unopp == 1) {
        prob_text = `<b style="color: ${prob_color}">${cand}</b>
            ${miss ? "are" : "is"} running unopposed and will win the seat.`
    } else {
        prob_text = `<b style="color: ${prob_color}">${cand}</b> 
            would have a 
            <b>${fmt_pct(prob > 0.5 ? prob : 1 - prob)}</b> chance of winning.`
    }
    let disclaimer = d.match.rcv ? `<p style="color: #777; font-size: 0.75em; font-style: italic; margin-top: 0.5em;">
        Estimates do not account for rank-choice voting.
    </p>` : "";
    
    d3.select(this).attr("stroke-width", 2.4);
    
    let txt = `<h3>${d.match.name}</h3>
        <p>${inc}</p>
        <div style="width: 100%; height: 1rem; margin: 4px 0; display: flex;">
        <div style="background: ${BLUE}; flex-basis: ${100*prob}%"></div>
        <div style="background: ${RED}; flex-basis: ${100 - 100*prob}%"></div>
        </div>
        <p>${prob_text}</p>
        ${disclaimer}
        `;

    tt.style("visibility", "visible")
      .html(txt)
      .style("left", (mx - 50)*svg_dim.width/w + "px")
      .style("bottom", (h - my + 25)*svg_dim.height/h + "px");
}
let mout = function(d) {
    geom_distrs_hover.attr("stroke-width", 0.0);
    tt.style("visibility", "hidden");
}

geom_distrs_hover.on("mousemove", mmv);
geom_distrs_hover.on("touchmove", mmv);
svg.on("mouseout", mout);
svg.on("touchend", mout);

let node = svg.node();
Object.defineProperty(node, "value", {
    get() {
        return draws;
    },
    set(v) {
        prob_table = v;
        geom_distrs.attr("fill", d => {
            return color(prob_table[d.match.state][d.match.district]);
        })
    }
});

return node;
}
```

```{ojs}
//| label: plot-sen-map
sen_map = {
let states = topojson.feature(geom_states, geom_states.objects.foo).features.map(d => {
    d.match = d_states.get(d.properties.state);
    if (typeof d.match == "undefined") {
        d.flip = false;
        d.match = null;
    } else {
        d.flip = ((d.match.pr_dem > 0.5 && d.match.inc_seat == "gop") 
                    || (d.match.pr_dem < 0.5 && d.match.inc_seat == "dem"))
                && (Math.abs(d.match.pr_dem - 0.5) > 0.01);
    }
    return d;
})
    
const w = 960;
const h = w * 0.70;
const GOLD = "#bc1";

const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, w, h])
    .style("width", "100%")
    .style("height", "auto");

let proj = d3.geoAlbers()
    .scale(1.40*w)
    .translate([0.78*w/2, 0.14*h/2]);
let path = d3.geoPath(proj);

let geom_distrs = svg
    .append("g")
    .attr("class", "distrs")
    .selectAll("path")
    .data(states)
    .enter().append("path")
    .attr("fill", "#fff")
    .attr("stroke", "#111")
    .attr("stroke-width", 0.5)
    .attr("d", path);

let geom_distrs_hover = svg
    .append("g")
    .attr("class", "distrs")
    .selectAll("path")
    .data(states)
    .enter().append("path")
    .attr("fill", d => d.flip ? "url(#diagonalHatch)" : "none")
    .attr("stroke", "#000")
    .attr("stroke-width", 0.0)
    .attr("d", path);    

let tt = d3.select("#plot-sen-map").append("div")
        .attr("class", "map-tooltip")
        .style("visibility", "hidden");
let prob_table;
    
let mmv = function(e, d) {
    let [mx, my] = d3.pointer(e);
    let svg_dim = svg.node().getBoundingClientRect();
    let w_fac = svg_dim.width/w;
    if (mx < 50/w_fac) mx = 50/w_fac;
    if (mx > w - 190/w_fac) mx = w - 190/w_fac;
    
    d3.select(this).attr("stroke-width", 2.4);
    
    let txt;
    if (d.match === null) {
        txt = `<h3>${AP[d.properties.state]}</h3><p></p>
            <p>No election this year.</p>`;
    } else {
        let prob = prob_table[d.match.state];
        let cand;
        let miss;
        if (prob > 0.5) {
            cand = !d.match.dem_cand ? "Democrats" : d.match.dem_cand;
            miss = !d.match.dem_cand;
        } else {
            cand = !d.match.rep_cand ? "Republicans" : d.match.rep_cand;
            miss = !d.match.rep_cand;
        }
        let inc = {
            dem: `<b style='color: ${DARK_BLUE}'>Dem.</b> incumbent`,
            gop: `<b style='color: ${DARK_RED}'>Rep.</b> incumbent`,
            open: "<b>Open</b> seat",
        }[d.match.inc_seat]
        let prob_text;
        let prob_color = prob > 0.5 ? DARK_BLUE : DARK_RED;
        if (d.match.unopp == 1) {
            prob_text = `<b style="color: ${prob_color}">${cand}</b>
                ${miss ? "are" : "is"} running unopposed and will win the seat.`
        } else {
            prob_text = `<b style="color: ${prob_color}">${cand}</b> 
                would have a 
                <b>${fmt_pct(prob > 0.5 ? prob : 1 - prob)}</b> chance of winning.`
        }
        let disclaimer = d.match.rcv ? `<p style="color: #777; font-size: 0.75em; font-style: italic; margin-top: 0.5em;">
            Estimates do not account for rank-choice voting.
        </p>` : "";
        
        txt = `<h3>${d.match.name}</h3>
            <p>${inc}</p>
            <div style="width: 100%; height: 1rem; margin: 4px 0; display: flex;">
            <div style="background: ${BLUE}; flex-basis: ${100*prob}%"></div>
            <div style="background: ${RED}; flex-basis: ${100 - 100*prob}%"></div>
            </div>
            <p>${prob_text}</p>
            ${disclaimer}
            `;
    }

    tt.style("visibility", "visible")
      .html(txt)
      .style("left", (mx - 50)*svg_dim.width/w + "px")
      .style("bottom", (h - my + 25)*svg_dim.height/h + "px");
}
let mout = function(d) {
    geom_distrs_hover.attr("stroke-width", 0.0);
    tt.style("visibility", "hidden");
}

geom_distrs_hover.on("mousemove", mmv);
geom_distrs_hover.on("touchmove", mmv);
svg.on("mouseout", mout);
svg.on("touchend", mout);

let node = svg.node();

Object.defineProperty(node, "value", {
    get() {
        return draws;
    },
    set(v) {
        prob_table = v;
        geom_distrs.attr("fill", d => {
            if (d.match === null) {
                return "#c0c0c0";
            } else {
                return color(prob_table[d.match.state]);
            }
        })
    }
})

return node;
}
```
:::

```{ojs}
//| include: false
house_map.value = prob_distr;
sen_map.value = prob_state;

function debounce(input, delay = 1000) {
  return Generators.observe(notify => {
    let timer = null;
    let value;

    // On input, check if we recently reported a value.
    // If we did, do nothing and wait for a delay;
    // otherwise, report the current value and set a timeout.
    function inputted() {
      if (timer !== null) {
          clearTimeout(timer);
      }
      timer = setTimeout(delayed, delay);
      /*
      } else {
          notify(value = input.value);
          timer = setTimeout(delayed, delay);
      }
      */
    }

    // After a delay, check if the last-reported value is the current value.
    // If it’s not, report the new value.
    function delayed() {
      timer = null;
      if (value === input.value) return;
      notify(value = input.value);
    }

    input.addEventListener("input", inputted), inputted();
    return () => input.removeEventListener("input", inputted);
  });
}
```

