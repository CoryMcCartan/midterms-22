---
title: "2022 House Forecast"
author: "Cory McCartan"
format:
    html:
        minimal: true
        theme:
            - journal
            - styles.scss
        email-obfuscation: javascript
        include-in-header:
            text: "<link rel='icon' href='https://corymccartan.com/us-house-18/assets/flag.gif'>"
output-file: index.html
execute: 
    echo: false
    warning: false
---

```{ojs setup}
//| include: false
import { fmt_pct, rate, fmt_surname, AP } from "./utils.js"
d3 = require("d3")

d_sum = FileAttachment("summary.json").json()
geom_hex = FileAttachment("hex.json").json()
d_history = FileAttachment("history.csv").csv({typed: true})
d_gcb = FileAttachment("natl_intent.csv").csv({typed: true})
d_hist = FileAttachment("seats_hist.csv").csv({typed: true})
d_distr_list = {
    let raw = await FileAttachment("districts.csv").csv({typed: true});
    return raw.map(d => {
        d.name = AP[d.state] + " " + d.district;
        d.interval = [d.dem_mean, d.dem_q10, d.dem_q25, d.dem_q75, d.dem_q90];
        d.rating = rate(d.pr_dem);
        d.dem_cand = fmt_surname(d.dem_cand);
        d.rep_cand = fmt_surname(d.rep_cand);
        d.search = {dem: "incumbent dem. ", open: "open seat ", gop: "incumbent rep. incumbent gop. "}[d.inc_seat] 
                + ["contested ", "unopposed uncontested "][d.unopp];
        return d;
    })
}
d_distr = d3.index(d_distr_list, d => d.state, d => d.district)

DARK_BLUE = "#0063B1"
DARK_RED = "#A0442C"
BLUE = "#3D77BB"
RED = "#B25D4C"
w_BODY = 796;
SMALL = width < 600;
elec_date = new Date("2022-11-08")

color = {
    let midpt = "#fafffa";
    let color_dem = d3.scaleLinear()
        .domain([0.5, 1.0])
        .range([midpt, DARK_BLUE]);
    let color_gop = d3.scaleLinear()
        .domain([0.0, 0.5])
        .range([DARK_RED, midpt]);
    return x => x <= 0.5 ? color_gop(x) : color_dem(x);
}

window.Plot = Plot;
window.d3 = d3;
window.d_distr_list = d_distr_list;
```

```{ojs}
//| label: plot-hist
//| column: screen
{
let exag_fac = 1 - Math.sqrt(width)/80;
let last_elec = 222;
let xmin = Math.max(Math.min(d_sum.s_q10*exag_fac, 218 - 10), 0)
let xmax = Math.min(Math.max(d_sum.s_q90/exag_fac, 218 + 10), 435)
let s_gain = "+" + Math.abs(222 - Math.round(d_sum.s_med));
let overl = Math.max(0.58, 1 - Math.sqrt(width) / 80);

let text_shadow = function(text, opt) {
    let opt2 = {...opt}
    opt2.dx = opt2.dx + 3
    opt2.dy = opt2.dy + 3
    opt2.fill = "#0007"
    return [Plot.text([text], opt2), Plot.text([text], opt)]
}

window.plot = Plot.plot({
    x: {
        domain: [xmin, xmax],
        clamp: true,
        inset: 10,
        tickSize: 8,
        reverse: true,
    },
    y: {
        legend: false,
        axis: null,
        insetTop: 4,
    },
    color: {
        legend: false,
    },
    marks: [
        Plot.rectY(d_hist, {
                x1: d => d.dem_seats - overl,
                x2: d => d.dem_seats + overl,
                y: "pr",
                fill: d => d.dem_seats >= 218 ? BLUE : RED,
            }),
        Plot.ruleY([0]),
        Plot.ruleY([0], {
            dy: 2,
            strokeWidth: 5,
            x1: d_sum.s_q10,
            x2: d_sum.s_q90,
            color: "red",
            }),
        Plot.ruleX([222, d_sum.s_med]),
        text_shadow(s_gain, { 
            x: d_sum.s_med, dy: -48, dx: 3,
            frameAnchor: "bottom", textAnchor: "start", lineAnchor: "bottom",
            fill: "white", fontSize: 40, fontWeight: "bold",
            }),
        text_shadow("GAIN", { 
            x: d_sum.s_med, dy: -42, dx: 5,
            frameAnchor: "bottom", textAnchor: "start", lineAnchor: "top",
            fill: "white", fontSize: 14, fontWeight: "bold",
            }),
        Plot.text(["← DEM. MAJORITY"], { 
            x: 217.5, dy: -4, dx: -3,
            frameAnchor: "bottom", textAnchor: "end",
            fontWeight: "bold", fill: "#111",
            }),
        Plot.text(["REP. MAJORITY →"], { 
            x: 217.5, dy: -4, dx: 3,
            frameAnchor: "bottom", textAnchor: "start",
            fontWeight: "bold", fill: "#111",
            }),
         Plot.text([last_elec + " LAST ELECTION"], { 
            x: last_elec, dy: -4,
            frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
            fontWeight: "bold",
            }),
         Plot.text(["← DEM. SEATS"], { 
            x: xmax, dy: -4 - (SMALL ? 10 : 0), dx: 4,
            frameAnchor: "bottom", textAnchor: "start",
            fontWeight: "bold",
            }),
    ],
    
    width: width,
    height: 240,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0,
    
    style: {
        fontSize: 9,
        color: "#444",
        overflow: "visible",
    }
})
return window.plot;
}
```

::: {.banner}
```{ojs}
//| label: summary
//| column: screen

dem_lead = d_sum.s_prob > 0.5
{
    let win_party = dem_lead ? "Democrats" : "Republicans"
    let win_class = dem_lead ? "dem" : "rep"
    let min_seats = dem_lead ? d_sum.s_q10 : 435 - d_sum.s_q90
    let max_seats = dem_lead ? d_sum.s_q90 : 435 - d_sum.s_q10
    let phrase = dem_lead ? "maintaining" : "flipping"
    let prob = dem_lead ? d_sum.s_prob : 1 - d_sum.s_prob
    let timestamp = d_history[d_history.length-1].timestamp;
    let date_fmt = timestamp.toLocaleString("en-US", { 
            weekday: "long", 
            month: "long", 
            day: "numeric", 
            hour: "numeric", 
            minute: "numeric" })       

    return md`
The <b class="${win_class}">${win_party}</b> are expected to win
**between ${min_seats} and ${max_seats} seats**.

They have a **${fmt_pct(prob)} chance** of ${phrase} the House.

<p class="updated">Last updated ${date_fmt}.</p>`;
}
```
:::

<!--
<div class="alert alert-dismissible alert-danger" style="margin-top: 1rem;">
<strong>NEW</strong><br /><hr />
<span style="color: black;">Look at this.</span>
</div>
-->

## The House map {#map}

:::{.column-screen}
```{ojs}
//| label: plot-map
{
let distrs = topojson.feature(geom_hex, geom_hex.objects.foo).features.map(d => {
    d.match = d_distr.get(d.properties.state).get(d.properties.district);
    d.flip = ((d.match.pr_dem > 0.5 && d.match.inc_seat == "gop") 
                || (d.match.pr_dem < 0.5 && d.match.inc_seat == "dem"))
            && (Math.abs(d.match.pr_dem - 0.5) > 0.1);
    return d;
})
    
const w = 960;
const h = w * 0.72;
const GOLD = "#bc1";

const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, w, h])
    .style("width", "100%")
    .style("height", "auto");

let proj = d3.geoAlbers()
    .scale(0.9*w)
    .translate([0.98*w/2, 0.91*h/2]);
let path = d3.geoPath(proj);

let geom_distrs = svg
    .append("g")
    .attr("class", "distrs")
    .selectAll("path")
    .data(distrs)
    .enter().append("path")
    .attr("fill", d => color(d.match.pr_dem))
    .attr("stroke", "#111")
    .attr("stroke-width", 0.5)
    .attr("d", path);

let geom_distrs_hover = svg
    .append("g")
    .attr("class", "distrs")
    .selectAll("path")
    .data(distrs)
    .enter().append("path")
    .attr("fill", d => d.flip ? "url(#diagonalHatch)" : "none")
    .attr("stroke", "#000")
    .attr("stroke-width", 0.0)
    .attr("d", path);    

let tt = d3.select("#plot-map").append("div")
        .attr("class", "map-tooltip")
        .style("visibility", "hidden");
    
let mmv = function(e, d) {
    let [mx, my] = d3.pointer(e);
    if (mx < 60) mx = 60;
    if (mx > w - 160) mx = w - 160;
    
    let prob = d.match.pr_dem;
    let cand;
    if (prob > 0.5) {
        cand = d.match.dem_cand == "NA" ? "The Democrat" : d.match.dem_cand;
    } else {
        cand = d.match.rep_cand == "NA" ? "The Republican" : d.match.rep_cand;
    }
    let inc = {
        dem: `<b style='color: ${DARK_BLUE}'>Dem.</b> incumbent`,
        gop: `<b style='color: ${DARK_RED}'>Rep.</b> incumbent`,
        open: "<b>Open</b> seat",
    }[d.match.inc_seat]
    let prob_text;
    let prob_color = prob > 0.5 ? DARK_BLUE : DARK_RED;
    if (d.match.unopp == 1) {
        prob_text = `<b style="color: ${prob_color}">${cand}</b>
            is running unopposed and will win the seat.`
    } else {
        prob_text = `<b style="color: ${prob_color}">${cand}</b> 
            has a <b>${fmt_pct(prob > 0.5 ? prob : 1 - prob)}</b> chance of winning.`
    }
    
    d3.select(this).attr("stroke-width", 2.4);
    
    let txt = `<h3>${d.match.name}</h3>
        <p>${inc}</p>
        <div style="width: 100%; height: 1rem; margin: 4px 0; display: flex;">
        <div style="background: ${BLUE}; flex-basis: ${100*prob}%"></div>
        <div style="background: ${RED}; flex-basis: ${100 - 100*prob}%"></div>
        </div>
        <p>${prob_text}</p>
        `;
        
    let svg_dim = svg.node().getBoundingClientRect();

    tt.style("visibility", "visible")
      .html(txt)
      .style("left", (mx - 50)*svg_dim.width/w + "px")
      .style("bottom", (h - my + 25)*svg_dim.height/h + "px");
}
let mout = function(d) {
    geom_distrs_hover.attr("stroke-width", 0.0);
    tt.style("visibility", "hidden");
}

geom_distrs_hover.on("mousemove", mmv);
geom_distrs_hover.on("touchmove", mmv);
svg.on("mouseout", mout);
svg.on("touchend", mout);

return svg.node();
}
```
:::

## Public opinion over time {#gcb}

```{ojs}
//| label: plot-gcb
plot_gcb = {
    const ci_w = d_sum.i_q90 - d_sum.i_q10
    const ymin = Math.max(Math.min(d_sum.i_med - 1*ci_w, 0.45), 0)
    const ymax = Math.min(Math.max(d_sum.i_med + 1*ci_w, 0.52), 1)
    const today = Math.min(elec_date, Date.now());
    const days_til = (elec_date - today) / (24 * 3600 * 1000);
    
    return Plot.plot({
        y: {
            label: null,
            domain: [ymin, ymax],
            grid: true,
            tickFormat: "%",
            axis: "right",
            ticks: 5,
        },
        x: {label: null},
        
        marks: [
            Plot.areaY(d_gcb, {
                    x: "date",
                    y1: d => Math.max(d.q10, 0.5),
                    y2: d => Math.max(d.q90, 0.5),
                    fill: BLUE, opacity: 0.4,
                }),
            Plot.areaY(d_gcb, {
                    x: "date",
                    y1: d => Math.max(d.q25, 0.5),
                    y2: d => Math.max(d.q75, 0.5),
                    fill: BLUE, opacity: 0.4,
                }),
            Plot.areaY(d_gcb, {
                    x: "date",
                    y1: d => Math.min(d.q10, 0.5),
                    y2: d => Math.min(d.q90, 0.5),
                    fill: RED, opacity: 0.4,
                }),
            Plot.areaY(d_gcb, {
                    x: "date",
                    y1: d => Math.min(d.q25, 0.5),
                    y2: d => Math.min(d.q75, 0.5),
                    fill: RED, opacity: 0.4,
                }),
            Plot.line(d_gcb.filter(d => d.date <= today), 
                    {x: "date", y: "natl_dem", strokeWidth: 3}),
            Plot.line(d_gcb.filter(d => d.date >= today), 
                    {x: "date", y: "natl_dem", strokeWidth: 3, 
                    strokeDasharray: "4,3", strokeLinecap: "butt" }),
            
            Plot.ruleY([0.5], {stroke: "#0007"}),
            Plot.rect([0], {
                    x1: today, x2: elec_date, y1: ymin, y2: ymax,
                    fill: "#fff7",
                }),
            Plot.ruleX([elec_date, today]),
            
            Plot.text([SMALL ? "Estimated Dem. vote" : "Estimated Democratic two-party vote"], { 
                    x: d3.min(d_gcb, d => d.date), dy: -4,
                    frameAnchor: "top", textAnchor: "start", lineAnchor: "bottom",
                    fontWeight: "bold", fontSize: 15,
                }),
            Plot.text(["TODAY"], { 
                    x: today, dy: -4,
                    frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
                    fontWeight: "bold",
                }),
            Plot.text([days_til > 20 + SMALL*30 ? "ELECTION DAY" : ""], { 
                    x: elec_date, dy: -4,
                    frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
                    fontWeight: "bold",
                }),
            Plot.text([fmt_pct(d_sum.i_med, 1)], { 
                    x: elec_date, y: d_sum.i_med, dy: -6, dx: -4,
                    frameAnchor: "top", textAnchor: "end", lineAnchor: "bottom",
                    fontWeight: "bold", fontSize: 15, fill: "#223",
                }),
        ],
        
        width: Math.min(w_BODY, width),
        height: 300,
        marginRight: 40,
        
        style: {
        }
    })
}
```


## The 435 House races {#table}

```{ojs}
viewof search = Inputs.search(d_distr_list, {
    label: "Districts:",
    columns: ["name", "state", "inc_seat", "search", "rating", "dem_cand", "rep_cand"],
    autocomplete: false,
    width: Math.min(width - 8, w_BODY),
})
```

<p class="text-muted">
You can search by district state, number, candidate, incumbency, rating, or contestedness.
Try searching for "Pelosi", "WA 7," "open," "safe," "contested," "lean rep.," or "tossup" seats.
</p>

```{ojs}
//| label: distr-tab
tab_distr = {
    window.search = search;
    let fmt_inc = function(x) {
        return html`<span style="color: ${{dem: DARK_BLUE, gop: DARK_RED, open: "black"}[x]}">
            ${{dem: "Dem.", gop: "Rep.", open: "Open"}[x]}
            </span>`
    }
    let fmt_part = function(x) {
        if (x == "NA") {
            return html`<span style="color: #777">&ndash;</span>`
        } else {
            let color = x > 0.5 ? DARK_BLUE : DARK_RED;
            return html`<span style="color: ${color}">${fmt_pct(x, 1)}</span>`
        }
    }
    let fmt_prob = function(x) {
        let tcolor = Math.abs(x - 0.5) > 0.3 ? "#fffc" : "black";
        return html`<div class="chip" style="background: ${color(x)}; color: ${tcolor}">
            ${fmt_pct(x)}</div>`
    }
    
    let xmin = d3.min(d_distr_list, d => d.dem_q10)
    let xmax = d3.max(d_distr_list, d => d.dem_q90)
    let avg = 50*(xmin + xmax);
    let x = d3.scaleLinear().domain([xmax, xmin]).range([0, 100]);
    let x_dem = d3.scaleLinear().domain([xmax, 0.5]).range([0, avg]).clamp(true);
    let x_rep = d3.scaleLinear().domain([0.5, xmin]).range([avg, 100]).clamp(true);
    let ici_d = BLUE + "bb";
    let oci_d = BLUE + "77";
    let ici_r = RED + "cc";
    let oci_r = RED + "88";
    let fmt_vs = function(int) {
        if (int[0] == "NA") {
            return html`<div style="text-align: center; color: #777">(Unopposed)</div>`
        } else {
            let gr = `linear-gradient(90deg, transparent 0%,
               transparent ${x_dem(int[4])}%, ${oci_d} ${x_dem(int[4])}%, 
               ${oci_d} ${x_dem(int[3])}%, ${ici_d} ${x_dem(int[3])}%,
               ${ici_d} ${x_dem(int[2])}%, ${oci_d} ${x_dem(int[2])}%,
               ${oci_d} ${x_dem(int[1])}%, transparent ${x_dem(int[1])}%,
               transparent ${x_rep(int[4])}%,  ${oci_r} ${x_rep(int[4])}%, 
               ${oci_r} ${x_rep(int[3])}%, ${ici_r} ${x_rep(int[3])}%,
               ${ici_r} ${x_rep(int[2])}%, ${oci_r} ${x_rep(int[2])}%,
               ${oci_r} ${x_rep(int[1])}%, transparent ${x_rep(int[1])}%,
               transparent 100%)`;
            return html`
                <div class="est" style="background: ${gr}; 
                    padding-left: calc(${x(int[0])}% - 6px);">
                &#x25cf;&nbsp;${fmt_pct(int[0])}</div>
                `;
        }
    }
    let fmt_vs_tiny = function(int) {
        if (int[0] == "NA") {
            return html`<span style="color: #777">(Unopp.)</span>`
        } else {
            let color = int[0] > 0.5 ? DARK_BLUE : DARK_RED;
            return html`<span style="color: ${color};">${fmt_pct(int[0], 1)}</span>`;
        }
    }
    
    let cols = ["name", "inc_seat", "pr_dem", "interval", "part_base", ];
    let cols_small = ["name", "inc_seat", "pr_dem", "interval", ];
    const tiny = width < 460;
    
    return Inputs.table(search, {
        columns: SMALL ? cols_small : cols,
        
        header: {
            name: "District",
            inc_seat: tiny ? "Inc." : "Incumbent",
            pr_dem: "Win prob.",
            interval: tiny ? "Est. vote" : "Vote forecast",
            part_base: "2020 pres.",
        },
        
        format: {
            inc_seat: fmt_inc,
            pr_dem: fmt_prob,
            interval: tiny ? fmt_vs_tiny : fmt_vs,
            part_base: fmt_part,
        },
        
        width: {
            interval: 400,
        },
        maxWidth: w_BODY,
        
        rows: 30,
        layout: "fixed",
    })
}
```

## How the odds have changed {#history}

```{ojs}
//| label: plot-prob
plot_prob = {
    const today = d3.max(d_history, d => d.from_date);
    const days_til = (elec_date - today) / (24 * 3600 * 1000);
    
    return Plot.plot({
        y: {
            label: null,
            domain: [0, 1],
            grid: true,
            tickFormat: "%",
            axis: "right",
            ticks: [0, 0.25, 0.5, 0.75, 1],
            insetTop: 4,
        },
        x: {label: null},
        
        marks: [
            Plot.line(d_history, {x: "from_date", y: "s_prob", strokeWidth: 3, stroke: BLUE}),
            Plot.line(d_history, {x: "from_date", y: d => 1 - d.s_prob, strokeWidth: 3, stroke: RED}),
            
            Plot.ruleY([0.5], {stroke: "#0007"}),
            Plot.ruleX([elec_date, today]),
            
            Plot.text([SMALL ? "Prob. of winning House" : "Probability of winning control"], { 
                    x: d3.min(d_history, d => d.from_date), dy: -4,
                    frameAnchor: "top", textAnchor: "start", lineAnchor: "bottom",
                    fontWeight: "bold", fontSize: 15,
                }),
            Plot.text(["TODAY"], { 
                    x: today, dy: -4,
                    frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
                    fontWeight: "bold",
                }),
            Plot.text([days_til > 20 + SMALL*30 ? "ELECTION DAY" : ""], { 
                    x: elec_date, dy: -4,
                    frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
                    fontWeight: "bold",
                }),
            Plot.text([fmt_pct(d_sum.s_prob)], { 
                    x: today, y: d_sum.s_prob, dy: -6, dx: 4,
                    frameAnchor: "top", textAnchor: "start", 
                    fontWeight: "bold", fontSize: 15, fill: BLUE, 
                    stroke: "white", strokeWidth: 4,
                }),
            Plot.text([fmt_pct(1 - d_sum.s_prob)], { 
                    x: today, y: 1 - d_sum.s_prob, dy: -6, dx: 4,
                    frameAnchor: "top", textAnchor: "start", 
                    fontWeight: "bold", fontSize: 15, fill: RED,
                    stroke: "white", strokeWidth: 4,
                }),
        ],
        
        width: Math.min(w_BODY, width),
        height: 300,
        marginRight: 40,
        
        style: {
        }
    })
}
```

```{ojs}
//| label: plot-hist-seats
plot_hist_seats = {
    const today = d3.max(d_history, d => d.from_date);
    const days_til = (elec_date - today) / (24 * 3600 * 1000);
    const ymin = d3.min(d_history, d => d.s_q10) * 0.9;
    const ymax = d3.max(d_history, d => d.s_q90) / 0.9;
    
    return Plot.plot({
        y: {
            label: null,
            domain: [ymin, ymax],
            grid: true,
            axis: "right",
            ticks: 5,
            insetTop: 4,
        },
        x: {label: null},
        
        marks: [
            Plot.areaY(d_history, {
                    x: "from_date",
                    y1: d => Math.max(d.s_q10, 217.5),
                    y2: d => Math.max(d.s_q90, 217.5),
                    fill: BLUE, opacity: 0.4,
                }),
            Plot.areaY(d_history, {
                    x: "from_date",
                    y1: d => Math.max(d.s_q25, 217.5),
                    y2: d => Math.max(d.s_q75, 217.5),
                    fill: BLUE, opacity: 0.4,
                }),
            Plot.areaY(d_history, {
                    x: "from_date",
                    y1: d => Math.min(d.s_q10, 217.5),
                    y2: d => Math.min(d.s_q90, 217.5),
                    fill: RED, opacity: 0.4,
                }),
            Plot.areaY(d_history, {
                    x: "from_date",
                    y1: d => Math.min(d.s_q25, 217.5),
                    y2: d => Math.min(d.s_q75, 217.5),
                    fill: RED, opacity: 0.4,
                }),
            Plot.line(d_history, {x: "from_date", y: "s_med", strokeWidth: 3}),
            
            Plot.ruleY([217.5], {stroke: "#0007"}),
            Plot.ruleX([elec_date, today]),
            
            Plot.text([SMALL ? "Forecasted Dem. seats" : "Forecasted Democratic seats won"], { 
                    x: d3.min(d_history, d => d.from_date), dy: -4,
                    frameAnchor: "top", textAnchor: "start", lineAnchor: "bottom",
                    fontWeight: "bold", fontSize: 15,
                }),
            Plot.text(["TODAY"], { 
                    x: today, dy: -4,
                    frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
                    fontWeight: "bold",
                }),
            Plot.text([days_til > 20 + SMALL*30 ? "ELECTION DAY" : ""], { 
                    x: elec_date, dy: -4,
                    frameAnchor: "top", textAnchor: "middle", lineAnchor: "bottom",
                    fontWeight: "bold",
                }),
            Plot.text([d_sum.s_med], { 
                    x: today, y: d_sum.s_med, dy: -6, dx: 4,
                    frameAnchor: "top", textAnchor: "start", 
                    fontWeight: "bold", fontSize: 15, fill: "#223",
                }),
        ],
        
        width: Math.min(w_BODY, width),
        height: 300,
        marginRight: 40,
        
        style: {
        }
    })
}
```



<hr style="margin: 2em 0" />

<p class="text-muted"><small>
A detailed write-up of the model, along with code and data, are available [here](https://github.com/CoryMcCartan/midterms-22).
</small></p>

<p class="text-muted"><small>
Data are courtesy of FiveThirtyEight, Data for Progress, VEST, the ALARM Project, Daily Kos Elections, the MIT Election Data + Science Lab, and IPUMS.
</small></p>


<svg height="10" width="10" xmlns="http://www.w3.org/2000/svg" version="1.1"> 
<defs> 
<pattern id="diagonalHatch" width="3" height="3" patternTransform="rotate(45 0 0)" patternUnits="userSpaceOnUse">
  <line x1="0" y1="0" x2="0" y2="3" style="stroke: #0105; stroke-width: 3;" />
</pattern>
</defs> 
</svg>

