
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace firms_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 89> locations_array__ = 
{" (found before start of program)",
 " (in 'firms.stan', line 67, column 4 to column 28)",
 " (in 'firms.stan', line 68, column 4 to column 30)",
 " (in 'firms.stan', line 69, column 4 to column 34)",
 " (in 'firms.stan', line 70, column 4 to column 28)",
 " (in 'firms.stan', line 71, column 4 to column 28)",
 " (in 'firms.stan', line 73, column 4 to column 27)",
 " (in 'firms.stan', line 74, column 4 to column 29)",
 " (in 'firms.stan', line 75, column 4 to column 33)",
 " (in 'firms.stan', line 76, column 4 to column 27)",
 " (in 'firms.stan', line 77, column 4 to column 27)",
 " (in 'firms.stan', line 79, column 4 to column 14)",
 " (in 'firms.stan', line 80, column 4 to column 25)",
 " (in 'firms.stan', line 81, column 4 to column 28)",
 " (in 'firms.stan', line 85, column 4 to column 53)",
 " (in 'firms.stan', line 86, column 4 to column 60)",
 " (in 'firms.stan', line 87, column 4 to column 71)",
 " (in 'firms.stan', line 88, column 4 to column 53)",
 " (in 'firms.stan', line 89, column 4 to column 53)",
 " (in 'firms.stan', line 118, column 2 to column 81)",
 " (in 'firms.stan', line 94, column 8 to line 97, column 61)",
 " (in 'firms.stan', line 93, column 21 to line 98, column 5)",
 " (in 'firms.stan', line 93, column 4 to line 98, column 5)",
 " (in 'firms.stan', line 100, column 4 to column 33)",
 " (in 'firms.stan', line 101, column 4 to column 41)",
 " (in 'firms.stan', line 103, column 4 to column 36)",
 " (in 'firms.stan', line 104, column 4 to column 38)",
 " (in 'firms.stan', line 105, column 4 to column 42)",
 " (in 'firms.stan', line 106, column 4 to column 36)",
 " (in 'firms.stan', line 107, column 4 to column 36)",
 " (in 'firms.stan', line 109, column 4 to column 27)",
 " (in 'firms.stan', line 110, column 4 to column 29)",
 " (in 'firms.stan', line 111, column 4 to column 33)",
 " (in 'firms.stan', line 112, column 4 to column 27)",
 " (in 'firms.stan', line 113, column 4 to column 27)",
 " (in 'firms.stan', line 38, column 4 to column 19)",
 " (in 'firms.stan', line 39, column 11 to column 12)",
 " (in 'firms.stan', line 39, column 4 to column 16)",
 " (in 'firms.stan', line 42, column 4 to column 25)",
 " (in 'firms.stan', line 43, column 4 to column 25)",
 " (in 'firms.stan', line 44, column 4 to column 25)",
 " (in 'firms.stan', line 45, column 10 to column 11)",
 " (in 'firms.stan', line 45, column 4 to column 47)",
 " (in 'firms.stan', line 46, column 10 to column 11)",
 " (in 'firms.stan', line 46, column 4 to column 47)",
 " (in 'firms.stan', line 47, column 10 to column 11)",
 " (in 'firms.stan', line 47, column 4 to column 47)",
 " (in 'firms.stan', line 49, column 4 to column 25)",
 " (in 'firms.stan', line 50, column 11 to column 12)",
 " (in 'firms.stan', line 50, column 14 to column 21)",
 " (in 'firms.stan', line 50, column 4 to column 31)",
 " (in 'firms.stan', line 52, column 4 to column 19)",
 " (in 'firms.stan', line 53, column 4 to column 18)",
 " (in 'firms.stan', line 57, column 10 to column 11)",
 " (in 'firms.stan', line 57, column 4 to column 38)",
 " (in 'firms.stan', line 58, column 11 to column 12)",
 " (in 'firms.stan', line 58, column 14 to column 21)",
 " (in 'firms.stan', line 58, column 4 to column 32)",
 " (in 'firms.stan', line 59, column 11 to column 18)",
 " (in 'firms.stan', line 59, column 4 to column 34)",
 " (in 'firms.stan', line 61, column 8 to column 47)",
 " (in 'firms.stan', line 62, column 8 to column 58)",
 " (in 'firms.stan', line 60, column 25 to line 63, column 5)",
 " (in 'firms.stan', line 60, column 4 to line 63, column 5)",
 " (in 'firms.stan', line 67, column 11 to column 18)",
 " (in 'firms.stan', line 68, column 11 to column 18)",
 " (in 'firms.stan', line 69, column 11 to column 18)",
 " (in 'firms.stan', line 70, column 11 to column 18)",
 " (in 'firms.stan', line 71, column 11 to column 18)",
 " (in 'firms.stan', line 81, column 11 to column 18)",
 " (in 'firms.stan', line 85, column 11 to column 18)",
 " (in 'firms.stan', line 86, column 11 to column 18)",
 " (in 'firms.stan', line 87, column 11 to column 18)",
 " (in 'firms.stan', line 88, column 11 to column 18)",
 " (in 'firms.stan', line 89, column 11 to column 18)",
 " (in 'firms.stan', line 8, column 14 to column 29)",
 " (in 'firms.stan', line 8, column 8 to column 39)",
 " (in 'firms.stan', line 10, column 12 to column 35)",
 " (in 'firms.stan', line 9, column 41 to line 11, column 9)",
 " (in 'firms.stan', line 9, column 8 to line 11, column 9)",
 " (in 'firms.stan', line 12, column 8 to column 19)",
 " (in 'firms.stan', line 7, column 45 to line 13, column 5)",
 " (in 'firms.stan', line 23, column 8 to column 32)",
 " (in 'firms.stan', line 25, column 15 to column 16)",
 " (in 'firms.stan', line 25, column 8 to line 27, column 38)",
 " (in 'firms.stan', line 28, column 15 to column 16)",
 " (in 'firms.stan', line 28, column 8 to line 31, column 14)",
 " (in 'firms.stan', line 33, column 8 to column 54)",
 " (in 'firms.stan', line 22, column 70 to line 34, column 5)"};

template <bool propto__>
  struct partial_log_lik_lpmf_rsfunctor__ {
  template <typename T3__, typename T4__, typename T5__, typename T6__,
            typename T7__, typename T9__, typename T10__, typename T11__,
            typename T13__, typename T15__,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_col_vector_t<T7__>* = nullptr,
            stan::require_col_vector_t<T9__>* = nullptr,
            stan::require_col_vector_t<T10__>* = nullptr,
            stan::require_col_vector_t<T11__>* = nullptr,
            stan::require_col_vector_t<T13__>* = nullptr,
            stan::require_col_vector_t<T15__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T3__>, T4__,
                       stan::value_type_t<T5__>, T6__,
                       stan::value_type_t<T7__>,
                       stan::promote_args_t<stan::value_type_t<T9__>,
                                            stan::value_type_t<T10__>,
                                            stan::value_type_t<T11__>,
                                            stan::value_type_t<T13__>,
                                            stan::value_type_t<T15__>>>
  operator()(const std::vector<int>& seq, const int& start, const int& end,
             std::ostream* pstream__, const T3__& Y, const T4__& bias,
             const T5__& Xc_sigma, const T6__& intercept_sigma,
             const T7__& b_sigma, const std::vector<int>& firms,
             const T9__& r_firms, const T10__& m_herding,
             const T11__& r_sigma_firms, const std::vector<int>& years,
             const T13__& r_years, const std::vector<int>& types,
             const T15__& r_types) const;
};
struct partial_log_lik_lpmf_functor__ {
  template <bool propto__, typename T3__, typename T4__, typename T5__,
            typename T6__, typename T7__, typename T9__, typename T10__,
            typename T11__, typename T13__, typename T15__,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_col_vector_t<T7__>* = nullptr,
            stan::require_col_vector_t<T9__>* = nullptr,
            stan::require_col_vector_t<T10__>* = nullptr,
            stan::require_col_vector_t<T11__>* = nullptr,
            stan::require_col_vector_t<T13__>* = nullptr,
            stan::require_col_vector_t<T15__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T3__>, T4__,
                       stan::value_type_t<T5__>, T6__,
                       stan::value_type_t<T7__>,
                       stan::promote_args_t<stan::value_type_t<T9__>,
                                            stan::value_type_t<T10__>,
                                            stan::value_type_t<T11__>,
                                            stan::value_type_t<T13__>,
                                            stan::value_type_t<T15__>>>
  operator()(const std::vector<int>& seq, const int& start, const int& end,
             const T3__& Y, const T4__& bias, const T5__& Xc_sigma,
             const T6__& intercept_sigma, const T7__& b_sigma,
             const std::vector<int>& firms, const T9__& r_firms,
             const T10__& m_herding, const T11__& r_sigma_firms,
             const std::vector<int>& years, const T13__& r_years,
             const std::vector<int>& types, const T15__& r_types,
             std::ostream* pstream__) const;
};
struct sequence_functor__ {
  std::vector<int>
  operator()(const int& start, const int& end, std::ostream* pstream__) const;
};

std::vector<int>
  sequence(const int& start, const int& end, std::ostream* pstream__) {
    using local_scalar_t__ = double;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 75;
      stan::math::validate_non_negative_index("seq", "end - start + 1",
                                              ((end - start) + 1));
      std::vector<int> seq =
         std::vector<int>(((end - start) + 1), 
           std::numeric_limits<int>::min());
      current_statement__ = 79;
      for (int n = 1; n <= stan::math::num_elements(seq); ++n) {
        current_statement__ = 77;
        stan::model::assign(seq, ((n + start) - 1),
          "assigning variable seq", stan::model::index_uni(n));
      }
      current_statement__ = 80;
      return seq;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T9__, typename T10__,
          typename T11__, typename T13__, typename T15__,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_eigen_matrix_dynamic_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_col_vector_t<T7__>* = nullptr,
          stan::require_col_vector_t<T9__>* = nullptr,
          stan::require_col_vector_t<T10__>* = nullptr,
          stan::require_col_vector_t<T11__>* = nullptr,
          stan::require_col_vector_t<T13__>* = nullptr,
          stan::require_col_vector_t<T15__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T3__>, T4__,
                     stan::value_type_t<T5__>, T6__,
                     stan::value_type_t<T7__>,
                     stan::promote_args_t<stan::value_type_t<T9__>,
                                          stan::value_type_t<T10__>,
                                          stan::value_type_t<T11__>,
                                          stan::value_type_t<T13__>,
                                          stan::value_type_t<T15__>>>
  partial_log_lik_lpmf(const std::vector<int>& seq, const int& start,
                       const int& end, const T3__& Y_arg__, const T4__& bias,
                       const T5__& Xc_sigma_arg__,
                       const T6__& intercept_sigma,
                       const T7__& b_sigma_arg__,
                       const std::vector<int>& firms,
                       const T9__& r_firms_arg__,
                       const T10__& m_herding_arg__,
                       const T11__& r_sigma_firms_arg__,
                       const std::vector<int>& years,
                       const T13__& r_years_arg__,
                       const std::vector<int>& types,
                       const T15__& r_types_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T3__>, T4__,
                                 stan::value_type_t<T5__>, T6__,
                                 stan::value_type_t<T7__>,
                                 stan::promote_args_t<stan::value_type_t<T9__>,
                                                      stan::value_type_t<T10__>,
                                                      stan::value_type_t<T11__>,
                                                      stan::value_type_t<T13__>,
                                                      stan::value_type_t<T15__>>>;
    int current_statement__ = 0; 
    const auto& Y = stan::math::to_ref(Y_arg__);
    const auto& Xc_sigma = stan::math::to_ref(Xc_sigma_arg__);
    const auto& b_sigma = stan::math::to_ref(b_sigma_arg__);
    const auto& r_firms = stan::math::to_ref(r_firms_arg__);
    const auto& m_herding = stan::math::to_ref(m_herding_arg__);
    const auto& r_sigma_firms = stan::math::to_ref(r_sigma_firms_arg__);
    const auto& r_years = stan::math::to_ref(r_years_arg__);
    const auto& r_types = stan::math::to_ref(r_types_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N;
      current_statement__ = 82;
      N = ((end - start) + 1);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("mu", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      current_statement__ = 84;
      stan::model::assign(mu,
        stan::math::add(
          stan::math::fma(
            stan::model::rvalue(m_herding, "m_herding",
              stan::model::index_multi(stan::model::rvalue(firms, "firms",
                                         stan::model::index_min_max(start, end)))),
            stan::model::rvalue(r_years, "r_years",
              stan::model::index_multi(stan::model::rvalue(years, "years",
                                         stan::model::index_min_max(start, end)))),
            stan::math::add(bias,
              stan::model::rvalue(r_firms, "r_firms",
                stan::model::index_multi(stan::model::rvalue(firms, "firms",
                                           stan::model::index_min_max(start, end)))))),
          stan::model::rvalue(r_types, "r_types",
            stan::model::index_multi(stan::model::rvalue(types, "types",
                                       stan::model::index_min_max(start, end))))),
        "assigning variable mu");
      current_statement__ = 85;
      stan::math::validate_non_negative_index("sigma", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      current_statement__ = 86;
      stan::model::assign(sigma,
        stan::math::exp(
          stan::math::add(
            stan::math::add(intercept_sigma,
              stan::math::multiply(
                stan::model::rvalue(Xc_sigma, "Xc_sigma",
                  stan::model::index_min_max(start, end)), b_sigma)),
            stan::model::rvalue(r_sigma_firms, "r_sigma_firms",
              stan::model::index_multi(stan::model::rvalue(firms, "firms",
                                         stan::model::index_min_max(start, end)))))),
        "assigning variable sigma");
      current_statement__ = 87;
      return stan::math::normal_lpdf<propto__>(
               stan::model::rvalue(Y, "Y",
                 stan::model::index_min_max(start, end)), mu, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__>
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T9__, typename T10__, typename T11__,
          typename T13__, typename T15__, stan::require_col_vector_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_eigen_matrix_dynamic_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_col_vector_t<T7__>*,
          stan::require_col_vector_t<T9__>*,
          stan::require_col_vector_t<T10__>*,
          stan::require_col_vector_t<T11__>*,
          stan::require_col_vector_t<T13__>*,
          stan::require_col_vector_t<T15__>*>
stan::promote_args_t<stan::value_type_t<T3__>, T4__,
                     stan::value_type_t<T5__>, T6__,
                     stan::value_type_t<T7__>,
                     stan::promote_args_t<stan::value_type_t<T9__>,
                                          stan::value_type_t<T10__>,
                                          stan::value_type_t<T11__>,
                                          stan::value_type_t<T13__>,
                                          stan::value_type_t<T15__>>>
partial_log_lik_lpmf_rsfunctor__<propto__>::operator()(const std::vector<int>& seq,
                                                       const int& start,
                                                       const int& end,
                                                       std::ostream* pstream__,
                                                       const T3__& Y,
                                                       const T4__& bias,
                                                       const T5__& Xc_sigma,
                                                       const T6__& intercept_sigma,
                                                       const T7__& b_sigma,
                                                       const std::vector<int>& firms,
                                                       const T9__& r_firms,
                                                       const T10__& m_herding,
                                                       const T11__& r_sigma_firms,
                                                       const std::vector<int>& years,
                                                       const T13__& r_years,
                                                       const std::vector<int>& types,
                                                       const T15__& r_types) 
const
{
  return partial_log_lik_lpmf<propto__>(seq, start + 1, end + 1, Y, bias,
           Xc_sigma, intercept_sigma, b_sigma, firms, r_firms, m_herding,
           r_sigma_firms, years, r_years, types, r_types, pstream__);
}

template <bool propto__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T9__, typename T10__,
          typename T11__, typename T13__, typename T15__,
          stan::require_col_vector_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_eigen_matrix_dynamic_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_col_vector_t<T7__>*,
          stan::require_col_vector_t<T9__>*,
          stan::require_col_vector_t<T10__>*,
          stan::require_col_vector_t<T11__>*,
          stan::require_col_vector_t<T13__>*,
          stan::require_col_vector_t<T15__>*>
stan::promote_args_t<stan::value_type_t<T3__>, T4__,
                     stan::value_type_t<T5__>, T6__,
                     stan::value_type_t<T7__>,
                     stan::promote_args_t<stan::value_type_t<T9__>,
                                          stan::value_type_t<T10__>,
                                          stan::value_type_t<T11__>,
                                          stan::value_type_t<T13__>,
                                          stan::value_type_t<T15__>>>
partial_log_lik_lpmf_functor__::operator()(const std::vector<int>& seq,
                                           const int& start, const int& end,
                                           const T3__& Y, const T4__& bias,
                                           const T5__& Xc_sigma,
                                           const T6__& intercept_sigma,
                                           const T7__& b_sigma,
                                           const std::vector<int>& firms,
                                           const T9__& r_firms,
                                           const T10__& m_herding,
                                           const T11__& r_sigma_firms,
                                           const std::vector<int>& years,
                                           const T13__& r_years,
                                           const std::vector<int>& types,
                                           const T15__& r_types,
                                           std::ostream* pstream__)  const
{
  return partial_log_lik_lpmf<propto__>(seq, start, end, Y, bias, Xc_sigma,
           intercept_sigma, b_sigma, firms, r_firms, m_herding,
           r_sigma_firms, years, r_years, types, r_types, pstream__);
}

std::vector<int>
sequence_functor__::operator()(const int& start, const int& end,
                               std::ostream* pstream__)  const
{
  return sequence(start, end, pstream__);
}

 class firms_model final : public model_base_crtp<firms_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> Y__;
  int N_firms;
  int N_years;
  int N_types;
  std::vector<int> firms;
  std::vector<int> years;
  std::vector<int> types;
  int K_sigma;
  Eigen::Matrix<double, -1, -1> X_sigma__;
  int prior_only;
  int grainsize;
  std::vector<int> seq;
  Eigen::Matrix<double, -1, -1> Xc_sigma__;
  Eigen::Matrix<double, -1, 1> means_X_sigma__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X_sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Xc_sigma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> means_X_sigma{nullptr, 0};
 
 public:
  ~firms_model() { }
  
  inline std::string model_name() const final { return "firms_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = --debug-mir-pretty --O1"};
  }
  
  
  firms_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "firms_model_namespace::firms_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 35;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 35;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 37;
      context__.validate_dims("data initialization","Y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      Y__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Y__.data(), N);
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 37;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 37;
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      context__.validate_dims("data initialization","N_firms","int",
           std::vector<size_t>{});
      N_firms = std::numeric_limits<int>::min();
      
      
      current_statement__ = 38;
      N_firms = context__.vals_i("N_firms")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "N_firms", N_firms, 1);
      current_statement__ = 39;
      context__.validate_dims("data initialization","N_years","int",
           std::vector<size_t>{});
      N_years = std::numeric_limits<int>::min();
      
      
      current_statement__ = 39;
      N_years = context__.vals_i("N_years")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "N_years", N_years, 1);
      current_statement__ = 40;
      context__.validate_dims("data initialization","N_types","int",
           std::vector<size_t>{});
      N_types = std::numeric_limits<int>::min();
      
      
      current_statement__ = 40;
      N_types = context__.vals_i("N_types")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "N_types", N_types, 1);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("firms", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","firms","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      firms = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 42;
      firms = context__.vals_i("firms");
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "firms", firms, 1);
      current_statement__ = 42;
      stan::math::check_less_or_equal(function__, "firms", firms, N_firms);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("years", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","years","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      years = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 44;
      years = context__.vals_i("years");
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "years", years, 1);
      current_statement__ = 44;
      stan::math::check_less_or_equal(function__, "years", years, N_years);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("types", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization","types","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      types = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 46;
      types = context__.vals_i("types");
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "types", types, 1);
      current_statement__ = 46;
      stan::math::check_less_or_equal(function__, "types", types, N_types);
      current_statement__ = 47;
      context__.validate_dims("data initialization","K_sigma","int",
           std::vector<size_t>{});
      K_sigma = std::numeric_limits<int>::min();
      
      
      current_statement__ = 47;
      K_sigma = context__.vals_i("K_sigma")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "K_sigma", K_sigma, 1);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("X_sigma", "N", N);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("X_sigma", "K_sigma", K_sigma);
      current_statement__ = 50;
      context__.validate_dims("data initialization","X_sigma","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K_sigma)});
      X_sigma__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K_sigma,
          std::numeric_limits<double>::quiet_NaN());
      new (&X_sigma) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_sigma__.data(), N, K_sigma);
        
      
      {
        std::vector<local_scalar_t__> X_sigma_flat__;
        current_statement__ = 50;
        X_sigma_flat__ = context__.vals_r("X_sigma");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= K_sigma; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 50;
            stan::model::assign(X_sigma, X_sigma_flat__[(pos__ - 1)],
              "assigning variable X_sigma", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      context__.validate_dims("data initialization","prior_only","int",
           std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      
      
      current_statement__ = 51;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization","grainsize","int",
           std::vector<size_t>{});
      grainsize = std::numeric_limits<int>::min();
      
      
      current_statement__ = 52;
      grainsize = context__.vals_i("grainsize")[(1 - 1)];
      current_statement__ = 53;
      stan::math::validate_non_negative_index("seq", "N", N);
      current_statement__ = 54;
      seq = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 54;
      stan::model::assign(seq, sequence(1, N, pstream__),
        "assigning variable seq");
      current_statement__ = 55;
      stan::math::validate_non_negative_index("Xc_sigma", "N", N);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("Xc_sigma", "K_sigma", K_sigma);
      current_statement__ = 57;
      Xc_sigma__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K_sigma,
          std::numeric_limits<double>::quiet_NaN());
      new (&Xc_sigma) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Xc_sigma__.data(), N, K_sigma);
        
      
      current_statement__ = 58;
      stan::math::validate_non_negative_index("means_X_sigma", "K_sigma",
                                              K_sigma);
      current_statement__ = 59;
      means_X_sigma__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K_sigma,
          std::numeric_limits<double>::quiet_NaN());
      new (&means_X_sigma) Eigen::Map<Eigen::Matrix<double, -1, 1>>(means_X_sigma__.data(), K_sigma);
        
      
      current_statement__ = 63;
      for (int i = 1; i <= K_sigma; ++i) {
        current_statement__ = 60;
        stan::model::assign(means_X_sigma,
          stan::math::mean(
            stan::model::rvalue(X_sigma, "X_sigma",
              stan::model::index_omni(), stan::model::index_uni(i))),
          "assigning variable means_X_sigma", stan::model::index_uni(i));
        current_statement__ = 61;
        stan::model::assign(Xc_sigma,
          stan::math::subtract(
            stan::model::rvalue(X_sigma, "X_sigma",
              stan::model::index_omni(), stan::model::index_uni(i)),
            stan::model::rvalue(means_X_sigma, "means_X_sigma",
              stan::model::index_uni(i))),
          "assigning variable Xc_sigma", stan::model::index_omni(),
                                           stan::model::index_uni(i));
      }
      current_statement__ = 64;
      stan::math::validate_non_negative_index("z_firms", "N_firms", N_firms);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("z_herding", "N_firms", N_firms);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("z_sigma_firms", "N_firms",
                                              N_firms);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("z_years", "N_years", N_years);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("z_types", "N_types", N_types);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("b_sigma", "K_sigma", K_sigma);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("r_firms", "N_firms", N_firms);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("m_herding", "N_firms", N_firms);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("r_sigma_firms", "N_firms",
                                              N_firms);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("r_years", "N_years", N_years);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("r_types", "N_types", N_types);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_firms + N_firms + N_firms + N_years + N_types + 
      1 + 1 + 1 + 1 + 1 + 1 + 1 + K_sigma;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "firms_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> z_firms;
      current_statement__ = 1;
      z_firms = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_firms);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_herding;
      current_statement__ = 2;
      z_herding = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    N_firms);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_sigma_firms;
      current_statement__ = 3;
      z_sigma_firms = in__.template read<
                        Eigen::Matrix<local_scalar_t__, -1, 1>>(N_firms);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_years;
      current_statement__ = 4;
      z_years = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_years);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_types;
      current_statement__ = 5;
      z_types = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_types);
      local_scalar_t__ sd_firms;
      current_statement__ = 6;
      sd_firms = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_herding;
      current_statement__ = 7;
      sd_herding = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      local_scalar_t__ sd_sigma_firms;
      current_statement__ = 8;
      sd_sigma_firms = in__.template read_constrain_lb<local_scalar_t__, 
                         jacobian__>(0, lp__);
      local_scalar_t__ sd_years;
      current_statement__ = 9;
      sd_years = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_types;
      current_statement__ = 10;
      sd_types = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      local_scalar_t__ bias;
      current_statement__ = 11;
      bias = in__.template read<local_scalar_t__>();
      local_scalar_t__ intercept_sigma;
      current_statement__ = 12;
      intercept_sigma = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> b_sigma;
      current_statement__ = 13;
      b_sigma = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  K_sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_firms;
      current_statement__ = 14;
      stan::model::assign(r_firms,
        stan::math::multiply((0.1 * sd_firms), z_firms),
        "assigning variable r_firms");
      Eigen::Matrix<local_scalar_t__, -1, 1> m_herding;
      current_statement__ = 15;
      stan::model::assign(m_herding,
        stan::math::exp(stan::math::multiply(sd_herding, z_herding)),
        "assigning variable m_herding");
      Eigen::Matrix<local_scalar_t__, -1, 1> r_sigma_firms;
      current_statement__ = 16;
      stan::model::assign(r_sigma_firms,
        stan::math::multiply((0.1 * sd_sigma_firms), z_sigma_firms),
        "assigning variable r_sigma_firms");
      Eigen::Matrix<local_scalar_t__, -1, 1> r_years;
      current_statement__ = 17;
      stan::model::assign(r_years,
        stan::math::multiply((0.1 * sd_years), z_years),
        "assigning variable r_years");
      Eigen::Matrix<local_scalar_t__, -1, 1> r_types;
      current_statement__ = 18;
      stan::model::assign(r_types,
        stan::math::multiply((0.1 * sd_types), z_types),
        "assigning variable r_types");
      {
        current_statement__ = 22;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 20;
          lp_accum__.add(
            stan::math::reduce_sum<partial_log_lik_lpmf_rsfunctor__<false>>(
              seq, grainsize, pstream__, Y, bias, Xc_sigma, intercept_sigma,
              b_sigma, firms, r_firms, m_herding, r_sigma_firms, years,
              r_years, types, r_types));
        } 
        current_statement__ = 23;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(bias, 3, 0, 0.05));
        current_statement__ = 24;
        lp_accum__.add(
          stan::math::student_t_lpdf<propto__>(intercept_sigma, 3, 0, 1));
        current_statement__ = 25;
        lp_accum__.add(
          stan::math::student_t_lpdf<propto__>(sd_firms, 3, 0, 1.0));
        current_statement__ = 26;
        lp_accum__.add(
          stan::math::student_t_lpdf<propto__>(sd_herding, 3, 0, 1.0));
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::student_t_lpdf<propto__>(sd_sigma_firms, 3, 0, 1.0));
        current_statement__ = 28;
        lp_accum__.add(
          stan::math::student_t_lpdf<propto__>(sd_years, 3, 0, 1.0));
        current_statement__ = 29;
        lp_accum__.add(
          stan::math::student_t_lpdf<propto__>(sd_types, 3, 0, 1.0));
        current_statement__ = 30;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(z_firms));
        current_statement__ = 31;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(z_herding));
        current_statement__ = 32;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(z_sigma_firms));
        current_statement__ = 33;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(z_years));
        current_statement__ = 34;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(z_types));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "firms_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> z_firms;
      current_statement__ = 1;
      z_firms = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_firms);
      Eigen::Matrix<double, -1, 1> z_herding;
      current_statement__ = 2;
      z_herding = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    N_firms);
      Eigen::Matrix<double, -1, 1> z_sigma_firms;
      current_statement__ = 3;
      z_sigma_firms = in__.template read<
                        Eigen::Matrix<local_scalar_t__, -1, 1>>(N_firms);
      Eigen::Matrix<double, -1, 1> z_years;
      current_statement__ = 4;
      z_years = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_years);
      Eigen::Matrix<double, -1, 1> z_types;
      current_statement__ = 5;
      z_types = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  N_types);
      double sd_firms;
      current_statement__ = 6;
      sd_firms = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      double sd_herding;
      current_statement__ = 7;
      sd_herding = in__.template read_constrain_lb<local_scalar_t__, 
                     jacobian__>(0, lp__);
      double sd_sigma_firms;
      current_statement__ = 8;
      sd_sigma_firms = in__.template read_constrain_lb<local_scalar_t__, 
                         jacobian__>(0, lp__);
      double sd_years;
      current_statement__ = 9;
      sd_years = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      double sd_types;
      current_statement__ = 10;
      sd_types = in__.template read_constrain_lb<local_scalar_t__, 
                   jacobian__>(0, lp__);
      double bias;
      current_statement__ = 11;
      bias = in__.template read<local_scalar_t__>();
      double intercept_sigma;
      current_statement__ = 12;
      intercept_sigma = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> b_sigma;
      current_statement__ = 13;
      b_sigma = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  K_sigma);
      Eigen::Matrix<double, -1, 1> r_firms =
         Eigen::Matrix<double, -1, 1>::Constant(N_firms,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> m_herding =
         Eigen::Matrix<double, -1, 1>::Constant(N_firms,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> r_sigma_firms =
         Eigen::Matrix<double, -1, 1>::Constant(N_firms,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> r_years =
         Eigen::Matrix<double, -1, 1>::Constant(N_years,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> r_types =
         Eigen::Matrix<double, -1, 1>::Constant(N_types,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(z_firms);
      out__.write(z_herding);
      out__.write(z_sigma_firms);
      out__.write(z_years);
      out__.write(z_types);
      out__.write(sd_firms);
      out__.write(sd_herding);
      out__.write(sd_sigma_firms);
      out__.write(sd_years);
      out__.write(sd_types);
      out__.write(bias);
      out__.write(intercept_sigma);
      out__.write(b_sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      stan::model::assign(r_firms,
        stan::math::multiply((0.1 * sd_firms), z_firms),
        "assigning variable r_firms");
      current_statement__ = 15;
      stan::model::assign(m_herding,
        stan::math::exp(stan::math::multiply(sd_herding, z_herding)),
        "assigning variable m_herding");
      current_statement__ = 16;
      stan::model::assign(r_sigma_firms,
        stan::math::multiply((0.1 * sd_sigma_firms), z_sigma_firms),
        "assigning variable r_sigma_firms");
      current_statement__ = 17;
      stan::model::assign(r_years,
        stan::math::multiply((0.1 * sd_years), z_years),
        "assigning variable r_years");
      current_statement__ = 18;
      stan::model::assign(r_types,
        stan::math::multiply((0.1 * sd_types), z_types),
        "assigning variable r_types");
      if (emit_transformed_parameters__) {
        out__.write(r_firms);
        out__.write(m_herding);
        out__.write(r_sigma_firms);
        out__.write(r_years);
        out__.write(r_types);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double b_sigma_intercept;
      current_statement__ = 19;
      b_sigma_intercept = (intercept_sigma -
                            stan::math::dot_product(means_X_sigma, b_sigma));
      out__.write(b_sigma_intercept);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> z_firms =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_firms,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        stan::model::assign(z_firms, in__.read<local_scalar_t__>(),
          "assigning variable z_firms", stan::model::index_uni(sym1__));
      }
      out__.write(z_firms);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_herding =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_firms,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        stan::model::assign(z_herding, in__.read<local_scalar_t__>(),
          "assigning variable z_herding", stan::model::index_uni(sym1__));
      }
      out__.write(z_herding);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_sigma_firms =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_firms,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        stan::model::assign(z_sigma_firms, in__.read<local_scalar_t__>(),
          "assigning variable z_sigma_firms", stan::model::index_uni(sym1__));
      }
      out__.write(z_sigma_firms);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_years =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_years,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        stan::model::assign(z_years, in__.read<local_scalar_t__>(),
          "assigning variable z_years", stan::model::index_uni(sym1__));
      }
      out__.write(z_years);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_types =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_types,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_types; ++sym1__) {
        stan::model::assign(z_types, in__.read<local_scalar_t__>(),
          "assigning variable z_types", stan::model::index_uni(sym1__));
      }
      out__.write(z_types);
      local_scalar_t__ sd_firms;
      sd_firms = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_firms);
      local_scalar_t__ sd_herding;
      sd_herding = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_herding);
      local_scalar_t__ sd_sigma_firms;
      sd_sigma_firms = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_sigma_firms);
      local_scalar_t__ sd_years;
      sd_years = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_years);
      local_scalar_t__ sd_types;
      sd_types = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_types);
      local_scalar_t__ bias;
      bias = in__.read<local_scalar_t__>();
      out__.write(bias);
      local_scalar_t__ intercept_sigma;
      intercept_sigma = in__.read<local_scalar_t__>();
      out__.write(intercept_sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> b_sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K_sigma,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K_sigma; ++sym1__) {
        stan::model::assign(b_sigma, in__.read<local_scalar_t__>(),
          "assigning variable b_sigma", stan::model::index_uni(sym1__));
      }
      out__.write(b_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"z_firms", "z_herding",
      "z_sigma_firms", "z_years", "z_types", "sd_firms", "sd_herding",
      "sd_sigma_firms", "sd_years", "sd_types", "bias", "intercept_sigma",
      "b_sigma", "r_firms", "m_herding", "r_sigma_firms", "r_years",
      "r_types", "b_sigma_intercept"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_firms)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N_firms)},
      std::vector<size_t>{static_cast<size_t>(N_firms)},
      std::vector<size_t>{static_cast<size_t>(N_years)},
      std::vector<size_t>{static_cast<size_t>(N_types)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K_sigma)},
      std::vector<size_t>{static_cast<size_t>(N_firms)},
      std::vector<size_t>{static_cast<size_t>(N_firms)},
      std::vector<size_t>{static_cast<size_t>(N_firms)},
      std::vector<size_t>{static_cast<size_t>(N_years)},
      std::vector<size_t>{static_cast<size_t>(N_types)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_firms" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_herding" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_sigma_firms" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_years" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_types; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_types" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sd_firms");
    param_names__.emplace_back(std::string() + "sd_herding");
    param_names__.emplace_back(std::string() + "sd_sigma_firms");
    param_names__.emplace_back(std::string() + "sd_years");
    param_names__.emplace_back(std::string() + "sd_types");
    param_names__.emplace_back(std::string() + "bias");
    param_names__.emplace_back(std::string() + "intercept_sigma");
    for (int sym1__ = 1; sym1__ <= K_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_sigma" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_firms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_herding" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_sigma_firms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_years" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_types; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_types" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_sigma_intercept");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_firms" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_herding" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_sigma_firms" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_years" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_types; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_types" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sd_firms");
    param_names__.emplace_back(std::string() + "sd_herding");
    param_names__.emplace_back(std::string() + "sd_sigma_firms");
    param_names__.emplace_back(std::string() + "sd_years");
    param_names__.emplace_back(std::string() + "sd_types");
    param_names__.emplace_back(std::string() + "bias");
    param_names__.emplace_back(std::string() + "intercept_sigma");
    for (int sym1__ = 1; sym1__ <= K_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_sigma" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_firms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m_herding" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_firms; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_sigma_firms" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_years" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_types; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_types" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_sigma_intercept");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"z_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"parameters\"},{\"name\":\"z_herding\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"parameters\"},{\"name\":\"z_sigma_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"parameters\"},{\"name\":\"z_years\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_years) + "},\"block\":\"parameters\"},{\"name\":\"z_types\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_types) + "},\"block\":\"parameters\"},{\"name\":\"sd_firms\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_herding\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_sigma_firms\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_years\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_types\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bias\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_sigma) + "},\"block\":\"parameters\"},{\"name\":\"r_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m_herding\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_sigma_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_years\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_years) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_types\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_types) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_sigma_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"z_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"parameters\"},{\"name\":\"z_herding\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"parameters\"},{\"name\":\"z_sigma_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"parameters\"},{\"name\":\"z_years\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_years) + "},\"block\":\"parameters\"},{\"name\":\"z_types\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_types) + "},\"block\":\"parameters\"},{\"name\":\"sd_firms\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_herding\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_sigma_firms\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_years\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_types\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bias\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K_sigma) + "},\"block\":\"parameters\"},{\"name\":\"r_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m_herding\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_sigma_firms\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_firms) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_years\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_years) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_types\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_types) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_sigma_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((N_firms + N_firms) + N_firms) + N_years) + N_types) + 1) + 1) +
         1) + 1) + 1) + 1) + 1) + K_sigma);
      const size_t num_transformed = 
  ((((N_firms + N_firms) + N_firms) + N_years) + N_types);
      const size_t num_gen_quantities = 1;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((N_firms + N_firms) + N_firms) + N_years) + N_types) + 1) + 1) +
         1) + 1) + 1) + 1) + 1) + K_sigma);
      const size_t num_transformed = 
  ((((N_firms + N_firms) + N_firms) + N_years) + N_types);
      const size_t num_gen_quantities = 1;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 13> names__{"z_firms", "z_herding",
      "z_sigma_firms", "z_years", "z_types", "sd_firms", "sd_herding",
      "sd_sigma_firms", "sd_years", "sd_types", "bias", "intercept_sigma",
      "b_sigma"};
      const std::array<Eigen::Index, 13> constrain_param_sizes__{N_firms,
       N_firms, N_firms, N_years, N_types, 1, 1, 1, 1, 1, 1, 1, K_sigma};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = firms_model_namespace::firms_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return firms_model_namespace::profiles__;
}

#endif


